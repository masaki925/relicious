require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  # e.g. user = User.create! valid_attributes
  def valid_attributes
    {
      "name"     => "name_sample",
      "email"    => "example@example.com",
      "birthday" => "2011-01-11",
      "screen_name" => "nickname_example",
    }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "when user is NOT logged in" do
    describe "GET edit" do
      it "reject" do
        get :edit
        response.should redirect_to root_path
      end
    end

    describe "GET users/:id/meetups" do
      it "reject" do
        get :meetups
        response.should redirect_to root_path
      end
    end
  end

  context "when user is logged in" do
    before { @user = FactoryGirl.create(:user) }

    describe "GET index" do
      context "without search params" do
        it "assigns all users as @users" do
          get :index, {}, {user_id: @user.id}
          assigns(:users).should eq([@user])
        end
      end

      context "with search params" do
        it "assigns searched users as @users" do
          get :index, {search: { location: "tokyo"} }, {user_id: @user.id}
          assigns(:users).should eq([@user])
        end
      end
    end

    describe "GET meetups" do
      context "request by user own" do
        it "success request" do
          get :meetups, { id: @user.id }, { user_id: @user.id }
          response.should be_success
        end
      end

      context "request for other user" do
        before { @other_user = FactoryGirl.create(:user) }
        it "reject" do
          get :meetups, { id: @user.id }, { user_id: @other_user.id }
          response.should redirect_to root_path
        end
      end
    end

    describe "GET show" do
      context "when the user is active" do
        before { get :show, {:id => @user.to_param}, {user_id: @user.id} }
        specify { assigns(:user).should eq(@user) }
        specify { response.should be_success }
      end

      context "when the user is NOT active" do
        before do
          @non_active_user = FactoryGirl.create( :user, active: false )
          get :show, { :id => @non_active_user.to_param }, { user_id: @user.id }
        end

        specify { response.should redirect_to root_path }
      end
    end

    describe "GET edit" do
      before do
        @user.languages = FactoryGirl.create_list(:language, 2)
        FactoryGirl.create_list(:user_avail, 2, user: @user)

        get :edit, {:id => @user.to_param}, {user_id: @user.id}
      end

      specify { assigns(:user).should_not be_nil }
      specify { assigns(:user_languages).should eq @user.user_languages }
      specify { assigns(:user_avails).should eq @user.user_avails }
    end

    describe "POST create" do
      describe "with any params" do
        it "reject because we only accept Facebook OAuth" do
          post :create, {}, {user_id: @user.id}
          response.should redirect_to(root_path)
        end
      end
    end

    describe "PUT update" do
      context "with valid params" do
        it "updates the requested user" do
          # Assuming there are no other users in the database, this
          # specifies that the User created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => @user.to_param, :user => {'these' => 'params'}}, {user_id: @user.id}
        end

        it "assigns the requested user as @user" do
          put :update, {:id => @user.to_param, :user => valid_attributes}, {user_id: @user.id}
          assigns(:user).should eq(@user)
        end

        it "redirects to the user" do
          put :update, {:id => @user.to_param, :user => valid_attributes}, {user_id: @user.id}
          response.should redirect_to(@user)
        end
      end

      context "with invalid params" do
        it "assigns the user as @user" do
          # Trigger the behavior that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:id => @user.to_param, :user => {}}, {user_id: @user.id}
          assigns(:user).should eq(@user)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:id => @user.to_param, :user => {}}, {user_id: @user.id}
          response.should render_template("edit")
        end
      end

      context "with empty language" do
        it "redirect successfully" do
          put :update, {:id => @user.to_param, :user => valid_attributes, languages: [""]}, {user_id: @user.id}
          response.should redirect_to(@user)
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested user" do
        expect {
          delete :destroy, {:id => @user.to_param}, {user_id: @user.id}
        }.to change(User, :count).by(-1)
      end

      it "redirects to the users list" do
        delete :destroy, {:id => @user.to_param}, {user_id: @user.id}
        response.should redirect_to(root_path)
      end
    end

    describe "POST withdraw" do
      it "change user's active flag" do
        User.find(@user.id).active.should be true
        post :withdraw, {}, {user_id: @user.id}
        User.find(@user.id).active.should be false
      end

      it "should be 200 ok" do
        post :withdraw, {}, {user_id: @user.id}
        response.should be_success
      end
    end
  end
end
