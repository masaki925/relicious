require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UserReviewsController do

  # This should return the minimal set of attributes required to create a valid
  # UserReview. As you add validations to UserReview, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserReviewsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before do
    @user       = FactoryGirl.create(:user)
    @reviewed_user = FactoryGirl.create(:user)
    @meetup     = FactoryGirl.create(:meetup)
    @user.meetups << @meetup
    @user_review = FactoryGirl.create(:user_review, user_id: @user.id, meetup_id: @meetup.id, reviewed_user_id: @reviewed_user.id)
  end

  describe "GET index" do
    it "assigns all user_reviews as @user_reviews" do
      get :index, {user_id: @reviewed_user.id}, {user_id: @user.id}
      assigns(:user_reviews).should eq([@user_review])
    end
  end

  describe "GET show" do
    it "assigns the requested user_review as @user_review" do
      get :show, {user_id: @reviewed_user.id, :id => @user_review.to_param}, {user_id: @user.id}
      assigns(:user_review).should eq(@user_review)
    end
  end

  describe "GET new" do
    it "assigns a new user_review as @user_review" do
      get :new, {user_id: @reviewed_user.id}, {user_id: @user.id}
      assigns(:user_review).should be_a_new(UserReview)
    end
  end

  describe "GET edit" do
    it "assigns the requested user_review as @user_review" do
      get :edit, {user_id: @reviewed_user.id, :id => @user_review.to_param}, {user_id: @user.id}
      assigns(:user_review).should eq(@user_review)
    end
  end

  describe "POST create" do
    before { UserReviewsController.stub(:current_user) { @user } }

    describe "with valid params" do
      it "creates a new UserReview" do
        expect {
          post :create, {user_review: FactoryGirl.attributes_for(:user_review, meetup_id: @meetup.id), user_id: @reviewed_user.id}, {user_id: @user.id}
        }.to change(UserReview, :count).by(1)
      end

      it "assigns a newly created user_review as @user_review" do
        post :create, {user_review: FactoryGirl.attributes_for(:user_review, meetup_id: @meetup.id), user_id: @reviewed_user.id}, {user_id: @user.id}
        assigns(:user_review).should be_a(UserReview)
        assigns(:user_review).should be_persisted
      end

      it "redirects to the created user_review" do
        post :create, {user_review: FactoryGirl.attributes_for(:user_review, meetup_id: @meetup.id), user_id: @reviewed_user.id}, {user_id: @user.id}
        response.should redirect_to( user_reviews_path(user_id: @reviewed_user.id, id: assigns(:user_review).id) )
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user_review as @user_review" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserReview.any_instance.stub(:save).and_return(false)
        post :create, {user_review: {}, user_id: @reviewed_user.id}, {user_id: @user.id}
        assigns(:user_review).should be_a_new(UserReview)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserReview.any_instance.stub(:save).and_return(false)
        post :create, {user_id: @reviewed_user.id, user_review: {}}, {user_id: @user.id}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user_review" do
        # Assuming there are no other user_reviews in the database, this
        # specifies that the UserReview created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        UserReview.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {user_id: @reviewed_user.id, :id => @user_review.to_param, :user_review => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested user_review as @user_review" do
        put :update, {id: @user_review.to_param, user_review: valid_attributes, user_id: @reviewed_user.id}, {user_id: @user.id}
        assigns(:user_review).should eq(@user_review)
      end

      it "redirects to the user_review" do
        put :update, {user_id: @reviewed_user.id, id: @user_review.to_param, user_review: valid_attributes}, {user_id: @user.id}
        response.should redirect_to(user_reviews_path(user_id: @reviewed_user.id, id: @user_review.id))
      end
    end

    describe "with invalid params" do
      it "assigns the user_review as @user_review" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserReview.any_instance.stub(:save).and_return(false)
        put :update, {user_id: @reviewed_user.id, meetup_id: @meetup.id, id: @user_review.to_param, user_review: {}}, {user_id: @user.id}
        assigns(:user_review).should eq(@user_review)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserReview.any_instance.stub(:save).and_return(false)
        put :update, {user_id: @reviewed_user.id, meetup_id: @meetup.id, id: @user_review.to_param, user_review: {}}, {user_id: @user.id}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user_review" do
      expect {
        delete :destroy, {user_id: @reviewed_user.id, :id => @user_review.to_param}, {user_id: @user.id}
      }.to change(UserReview, :count).by(-1)
    end

    it "redirects to the user_reviews list" do
      delete :destroy, {user_id: @reviewed_user.id, :id => @user_review.to_param}, {user_id: @user.id}
      response.should redirect_to(user_reviews_path)
    end
  end

end
