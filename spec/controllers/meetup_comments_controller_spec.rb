require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MeetupCommentsController do

  # This should return the minimal set of attributes required to create a valid
  # MeetupComment. As you add validations to MeetupComment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MeetupCommentsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all meetup_comments as @meetup_comments" do
      meetup_comment = FactoryGirl.create(:meetup_comment)
      get :index, {}, valid_session
      assigns(:meetup_comments).should eq([meetup_comment])
    end
  end

  describe "GET show" do
    it "assigns the requested meetup_comment as @meetup_comment" do
      meetup_comment = FactoryGirl.create(:meetup_comment)
      get :show, {:id => meetup_comment.to_param}, valid_session
      assigns(:meetup_comment).should eq(meetup_comment)
    end
  end

  describe "GET new" do
    it "assigns a new meetup_comment as @meetup_comment" do
      get :new, {}, valid_session
      assigns(:meetup_comment).should be_a_new(MeetupComment)
    end
  end

  describe "GET edit" do
    it "assigns the requested meetup_comment as @meetup_comment" do
      meetup_comment = FactoryGirl.create(:meetup_comment)
      get :edit, {:id => meetup_comment.to_param}, valid_session
      assigns(:meetup_comment).should eq(meetup_comment)
    end
  end

  describe "POST create" do
    before do
      @meetup = FactoryGirl.create(:meetup)
    end

    describe "with valid params" do
      it "creates a new MeetupComment" do
        expect {
          post :create, {:meetup_comment => FactoryGirl.attributes_for(:meetup_comment), :meetup_id => @meetup.id}, {:user_id => @meetup.user.id}
        }.to change(MeetupComment, :count).by(1)
      end

      it "assigns a newly created meetup_comment as @meetup_comment" do
        post :create, {:meetup_comment => FactoryGirl.attributes_for(:meetup_comment), :meetup_id => @meetup.id}, {:user_id => @meetup.user.id}
        assigns(:meetup_comment).should be_a(MeetupComment)
        assigns(:meetup_comment).should be_persisted
      end

      it "redirects to the created meetup_comment" do
        post :create, {:meetup_comment => FactoryGirl.attributes_for(:meetup_comment), :meetup_id => @meetup.id}, {:user_id => @meetup.user.id}
        response.should redirect_to(meetup_meetup_comments_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved meetup_comment as @meetup_comment" do
        # Trigger the behavior that occurs when invalid params are submitted
        MeetupComment.any_instance.stub(:save).and_return(false)
        post :create, {:meetup_comment => {}}, {:user_id => @meetup.user.id}
        assigns(:meetup_comment).should be_a_new(MeetupComment)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        MeetupComment.any_instance.stub(:save).and_return(false)
        post :create, {:meetup_comment => {}}, {:user_id => @meetup.user.id}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested meetup_comment" do
        meetup_comment = FactoryGirl.create(:meetup_comment)
        # Assuming there are no other meetup_comments in the database, this
        # specifies that the MeetupComment created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        MeetupComment.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => meetup_comment.to_param, :meetup_comment => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested meetup_comment as @meetup_comment" do
        meetup_comment = FactoryGirl.create(:meetup_comment)
        put :update, {:id => meetup_comment.to_param, :meetup_comment => valid_attributes}, valid_session
        assigns(:meetup_comment).should eq(meetup_comment)
      end

      it "redirects to the meetup_comment" do
        meetup_comment = FactoryGirl.create(:meetup_comment)
        put :update, {:id => meetup_comment.to_param, :meetup_comment => valid_attributes}, valid_session
        response.should redirect_to(meetup_meetup_comments_path(meetup_comment.id))
      end
    end

    describe "with invalid params" do
      it "assigns the meetup_comment as @meetup_comment" do
        meetup_comment = FactoryGirl.create(:meetup_comment)
        # Trigger the behavior that occurs when invalid params are submitted
        MeetupComment.any_instance.stub(:save).and_return(false)
        put :update, {:id => meetup_comment.to_param, :meetup_comment => {}}, valid_session
        assigns(:meetup_comment).should eq(meetup_comment)
      end

      it "re-renders the 'edit' template" do
        meetup_comment = FactoryGirl.create(:meetup_comment)
        # Trigger the behavior that occurs when invalid params are submitted
        MeetupComment.any_instance.stub(:save).and_return(false)
        put :update, {:id => meetup_comment.to_param, :meetup_comment => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested meetup_comment" do
      meetup_comment = FactoryGirl.create(:meetup_comment)
      expect {
        delete :destroy, {:id => meetup_comment.to_param}, valid_session
      }.to change(MeetupComment, :count).by(-1)
    end

    it "redirects to the meetup_comments list" do
      meetup_comment = FactoryGirl.create(:meetup_comment)
      meetup = meetup_comment.meetup
      delete :destroy, {:id => meetup_comment.to_param}, valid_session
      response.should redirect_to(meetup_meetup_comments_path(meetup))
    end
  end

end
