require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MeetupCommentsController do

  # This should return the minimal set of attributes required to create a valid
  # MeetupComment. As you add validations to MeetupComment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MeetupCommentsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  context "when user is NOT logged in" do
    it "reject any operations"
  end

  context "when user logged in" do
    describe "POST create" do
      before { @meetup = FactoryGirl.create(:meetup) }

      describe "with valid params" do
        it "creates a new MeetupComment" do
          expect {
            post :create, {meetup_comment: FactoryGirl.attributes_for(:meetup_comment), meetup_id: @meetup.id}, {user_id: @meetup.user.id}
          }.to change(MeetupComment, :count).by(1)
        end

        it "assigns a newly created meetup_comment as @meetup_comment" do
          post :create, {meetup_comment: FactoryGirl.attributes_for(:meetup_comment), meetup_id: @meetup.id}, {user_id: @meetup.user.id}
          assigns(:meetup_comment).should be_a(MeetupComment)
          assigns(:meetup_comment).should be_persisted
        end

        it "redirects to the related meetup detail page" do
          post :create, {meetup_comment: FactoryGirl.attributes_for(:meetup_comment), meetup_id: @meetup.id}, {user_id: @meetup.user.id}
          response.should redirect_to(meetup_path(@meetup))
        end
      end

      describe "with invalid params" do
        before  { post :create, { meetup_id: @meetup.id }, {user_id: @meetup.user.id } }

        specify { response.should redirect_to(meetup_path(@meetup)) }
      end
    end

    describe "PUT update" do
      before { @meetup_comment = FactoryGirl.create(:meetup_comment) }

      describe "with valid params" do
        it "updates the requested meetup_comment" do
          # Assuming there are no other meetup_comments in the database, this
          # specifies that the MeetupComment created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          MeetupComment.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:meetup_id => @meetup_comment.meetup_id, :id => @meetup_comment.id, :meetup_comment => {'these' => 'params'}}, {:user_id => @meetup_comment.user.id}
        end

        it "assigns the requested meetup_comment as @meetup_comment" do
          put :update, {:meetup_id => @meetup_comment.meetup_id, :id => @meetup_comment.id, :meetup_comment => valid_attributes}, {:user_id => @meetup_comment.user.id}
          assigns(:meetup_comment).should eq(@meetup_comment)
        end

        it "redirects to the related meetup detail page" do
          put :update, {:meetup_id => @meetup_comment.meetup_id, :id => @meetup_comment.id, :meetup_comment => valid_attributes}, {:user_id => @meetup_comment.user.id}
          response.should redirect_to(meetup_path(@meetup_comment.meetup))
        end
      end

      describe "with invalid params" do
        it "assigns the meetup_comment as @meetup_comment" do
          # Trigger the behavior that occurs when invalid params are submitted
          MeetupComment.any_instance.stub(:save).and_return(false)
          put :update, {:meetup_id => @meetup_comment.meetup_id, :id => @meetup_comment.id, :meetup_comment => {}}, {:user_id => @meetup_comment.user.id}
          assigns(:meetup_comment).should eq(@meetup_comment)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          MeetupComment.any_instance.stub(:save).and_return(false)
          put :update, {meetup_id: @meetup_comment.meetup_id, id: @meetup_comment.id, meetup_comment: {}}, {user_id: @meetup_comment.user.id}
          response.should redirect_to(meetup_path(@meetup_comment.meetup))
        end
      end
    end

    describe "DELETE destroy" do
      before { @meetup_comment = FactoryGirl.create(:meetup_comment) }

      context "when the comment is created by OTHER user" do
        before { @other_user = FactoryGirl.create(:user) }

        it "rejected" do
          expect {
            delete :destroy, {meetup_id: @meetup_comment.meetup_id, id: @meetup_comment.id}, {user_id: @other_user.id}
          }.to change(MeetupComment, :count).by(0)
        end

        it "redirects to the meetup detail page" do
          delete :destroy, {meetup_id: @meetup_comment.meetup_id, id: @meetup_comment.id}, {user_id: @other_user.id}
          response.should redirect_to(meetup_path(@meetup_comment.meetup))
        end
      end

      context "when the comment is created by user own" do
        it "destroys the requested meetup_comment" do
          expect {
            delete :destroy, {meetup_id: @meetup_comment.meetup_id, id: @meetup_comment.id}, {user_id: @meetup_comment.user.id}
          }.to change(MeetupComment, :count).by(-1)
        end

        it "redirects to the meetup detail page" do
          delete :destroy, {meetup_id: @meetup_comment.meetup_id, id: @meetup_comment.id}, {user_id: @meetup_comment.user.id}
          response.should redirect_to(meetup_path(@meetup_comment.meetup))
        end
      end
    end
  end
end
